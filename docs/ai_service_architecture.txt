AI Service 架构图
==================

┌─────────────────────────────────────────────────────────────────┐
│                         AIService (主服务)                        │
│                    scripts/ai_service.gd (593行)                 │
│                                                                   │
│  公共接口:                                                         │
│  • start_chat(user_message, trigger_mode)                        │
│  • end_chat()                                                    │
│  • add_to_history(role, content)                                 │
│  • get_goto_field() -> int                                       │
│  • clear_goto_field()                                            │
│                                                                   │
│  公共属性（只读）:                                                 │
│  • current_conversation: Array                                   │
│  • api_key: String (getter → config_loader.api_key)              │
│  • config: Dictionary (getter → config_loader.config)            │
│                                                                   │
│  信号:                                                            │
│  • chat_response_received(response)                              │
│  • chat_response_completed()                                     │
│  • chat_fields_extracted(fields)                                 │
│  • chat_error(error_message)                                     │
│  • summary_completed(summary)                                    │
└───────────────────────────┬─────────────────────────────────────┘
                            │
        ┌───────────────────┼───────────────────┐
        │                   │                   │
        ▼                   ▼                   ▼
┌───────────────┐   ┌───────────────┐   ┌───────────────┐
│ ConfigLoader  │   │  HTTPClient   │   │ResponseParser │
│   (125行)     │   │   (125行)     │   │   (235行)     │
├───────────────┤   ├───────────────┤   ├───────────────┤
│• load_all()   │   │• start_stream │   │• process_     │
│• config: Dict │   │  _request()   │   │  stream_data()│
│• api_key: Str │   │• stop_        │   │• finalize_    │
│               │   │  streaming()  │   │  response()   │
│职责:          │   │               │   │• reset()      │
│加载配置和     │   │职责:          │   │               │
│API密钥        │   │处理流式HTTP   │   │职责:          │
│               │   │请求和SSE数据  │   │解析响应和     │
│               │   │               │   │提取字段       │
└───────────────┘   └───────┬───────┘   └───────┬───────┘
                            │                   │
                            │ 信号:             │ 信号:
                            │ • stream_chunk_   │ • content_
                            │   received        │   received
                            │ • stream_         │ • mood_
                            │   completed       │   extracted
                            │ • stream_error    │
                            │                   │
                            └───────┬───────────┘
                                    │
                                    ▼
                            ┌───────────────┐
                            │    Logger     │
                            │   (152行)     │
                            ├───────────────┤
                            │• log_api_call │
                            │• log_api_     │
                            │  request      │
                            │• log_api_error│
                            │• save_to_diary│
                            │               │
                            │职责:          │
                            │记录日志和     │
                            │保存日记       │
                            └───────────────┘

数据流向
========

1. 对话请求流程:
   用户输入 → AIService.start_chat()
            → ConfigLoader (获取配置和密钥)
            → HTTPClient.start_stream_request()
            → 服务器

2. 流式响应流程:
   服务器 → HTTPClient (接收SSE数据)
         → signal: stream_chunk_received
         → ResponseParser.process_stream_data()
         → signal: content_received / mood_extracted
         → AIService (更新状态)
         → chat_response_received (发送给UI)

3. 响应完成流程:
   ResponseParser.finalize_response()
   → AIService._apply_extracted_fields()
   → Logger.log_api_call()
   → chat_response_completed (通知UI)

4. 总结流程:
   AIService.end_chat()
   → _call_summary_api()
   → _handle_summary_response()
   → _save_memory_and_diary()
   → Logger.save_to_diary()
   → _call_address_api() (并发)
   → _call_relationship_api() (条件触发)

外部依赖
========

AIService 依赖以下自动加载单例:
• SaveManager - 存档管理
• PromptBuilder - 提示词构建
• EventHelpers - 事件辅助函数

被以下模块使用:
• chat_dialog.gd - 对话界面
• (其他可能使用对话功能的模块)

文件大小对比
============

原文件:
├─ ai_service.gd ........................ 1360 行

重构后:
├─ ai_service.gd (主服务) ............... 593 行 (-56.4%)
├─ ai_config_loader.gd .................. 125 行
├─ ai_http_client.gd .................... 125 行
├─ ai_response_parser.gd ................ 235 行
└─ ai_logger.gd ......................... 152 行
   ─────────────────────────────────────────────
   总计 ................................. 1230 行 (-9.6%)

优势
====

✓ 单一职责: 每个模块只负责一个功能领域
✓ 低耦合: 模块间通过信号和接口通信
✓ 高内聚: 相关功能集中在同一模块
✓ 易测试: 可独立测试每个模块
✓ 易维护: 修改某个功能只需关注对应模块
✓ 可复用: 子模块可在其他项目中复用
✓ 向后兼容: 对外接口完全不变
